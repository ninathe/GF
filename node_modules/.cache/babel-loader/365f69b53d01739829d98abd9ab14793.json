{"ast":null,"code":"var _jsxFileName = \"/Users/ninaher/Documents/GF/src/components/map/Map.js\";\nimport React, { Component } from 'react';\nimport '../../styles/map.css';\nimport mapboxgl from 'mapbox-gl'; //json files in map\n//Redux\n\nimport { connect } from \"react-redux\";\nimport { addLayer } from '../../actions';\nimport formatJson from '../utils';\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      layersInMap: [],\n      lng: -80.00,\n      lat: 40.438,\n      zoom: 11\n    };\n  }\n\n  componentDidMount() {\n    const _this$state = this.state,\n          lng = _this$state.lng,\n          lat = _this$state.lat,\n          zoom = _this$state.zoom;\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/light-v10',\n      center: [lng, lat],\n      zoom\n    });\n    this._map = map; // Add zoom and rotation controls to the map.\n\n    map.addControl(new mapboxgl.NavigationControl());\n    map.on('load', function () {\n      this.addHeatMap();\n    }.bind(this));\n    map.on('move', () => {\n      const _map$getCenter = map.getCenter(),\n            lng = _map$getCenter.lng,\n            lat = _map$getCenter.lat;\n\n      this.setState({\n        lng: lng.toFixed(4),\n        lat: lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    this.updateMapLayers();\n  }\n\n  updateMapLayers(props) {\n    this.deleteLayers();\n    this.addLayers();\n  }\n\n  deleteLayers() {\n    for (let i = 0; i < this.state.layersInMap.length; i++) {\n      if (this._map.getSource(this.state.layersInMap[i].id)) {\n        this._map.removeLayer(this.state.layersInMap[i].id);\n\n        this._map.removeSource(this.state.layersInMap[i].id);\n      }\n\n      if (this._map.getSource(this.state.layersInMap[i].id + '_outline')) {\n        this._map.removeLayer(this.state.layersInMap[i].id + '_outline');\n\n        this._map.removeSource(this.state.layersInMap[i].id + '_outline');\n      }\n    }\n  }\n\n  addLayers() {\n    for (let i = 0; i < this.props.layers.length; i++) {\n      let layer = this.props.layers[i];\n      if (layer.source) this.addVectorLayer(layer);else this.addLayerByType(this.props.layers[i]);\n    }\n\n    this.state.layersInMap = this.props.layers;\n  }\n\n  addLayerByType(layer) {\n    let type = layer.features ? layer.features[0].geometry.type : layer.geometry.type; //FIX: Some layers received from Turf doesn't have features\n\n    switch (type) {\n      case 'Polygon':\n        this.addPolygonLayer(layer);\n        break;\n\n      case 'MultiPolygon':\n        this.addPolygonLayer(layer);\n        break;\n\n      case 'MultiLineString':\n        this.addLineLayer(layer);\n        break;\n\n      case 'Point':\n        this.addPointLayer(layer);\n        break;\n\n      default:\n        console.log('Unidentified layer type!!' + layer.type);\n    }\n  }\n\n  addHeatMap() {\n    debugger;\n    let map = this._map;\n    map.addSource('trees', {\n      type: 'vector',\n      url: 'mapbox://ninath93.5kp4zadi'\n    });\n    map.addLayer({\n      id: 'trees-heat',\n      \"source-layer\": \"trees-dhgc50\",\n      type: 'heatmap',\n      source: 'trees',\n      maxzoom: 15,\n      paint: {\n        // increase weight as diameter breast height increases\n        'heatmap-weight': {\n          property: 'dbh',\n          type: 'exponential',\n          stops: [[1, 0], [62, 1]]\n        },\n        // increase intensity as zoom level increases\n        'heatmap-intensity': {\n          stops: [[11, 1], [15, 3]]\n        },\n        // assign color values be applied to points depending on their density\n        'heatmap-color': ['interpolate', ['linear'], ['heatmap-density'], 0, 'rgba(236,222,239,0)', 0.2, 'rgb(208,209,230)', 0.4, 'rgb(166,189,219)', 0.6, 'rgb(103,169,207)', 0.8, 'rgb(28,144,153)'],\n        // increase radius as zoom increases\n        'heatmap-radius': {\n          stops: [[11, 15], [15, 20]]\n        },\n        // decrease opacity to transition into the circle layer\n        'heatmap-opacity': {\n          default: 1,\n          stops: [[14, 1], [15, 0]]\n        }\n      }\n    }, 'waterway-label');\n    map.addLayer({\n      id: 'trees-point',\n      type: 'circle',\n      source: 'trees',\n      \"source-layer\": \"trees-dhgc50\",\n      minzoom: 14,\n      paint: {\n        // increase the radius of the circle as the zoom level and dbh value increases\n        'circle-radius': {\n          property: 'dbh',\n          type: 'exponential',\n          stops: [[{\n            zoom: 15,\n            value: 1\n          }, 5], [{\n            zoom: 15,\n            value: 62\n          }, 10], [{\n            zoom: 22,\n            value: 1\n          }, 20], [{\n            zoom: 22,\n            value: 62\n          }, 50]]\n        },\n        'circle-color': {\n          property: 'dbh',\n          type: 'exponential',\n          stops: [[0, 'rgba(236,222,239,0)'], [10, 'rgb(236,222,239)'], [20, 'rgb(208,209,230)'], [30, 'rgb(166,189,219)'], [40, 'rgb(103,169,207)'], [50, 'rgb(28,144,153)'], [60, 'rgb(1,108,89)']]\n        },\n        'circle-stroke-color': 'white',\n        'circle-stroke-width': 1,\n        'circle-opacity': {\n          stops: [[14, 0], [15, 1]]\n        }\n      }\n    }, 'waterway-label');\n    map.on('click', 'trees-point', function (e) {\n      new mapboxgl.Popup().setLngLat(e.features[0].geometry.coordinates).setHTML('<div class = \"line\"><b>Garbage type:</b>' + e.features[0].properties.dbh + '</div>' + '<div class =\"line\"><b>hei</b></div>').addTo(map);\n    });\n  }\n\n  addPointLayer(layer) {\n    this._map.addLayer({\n      'id': layer.id,\n      'type': 'circle',\n      'source': {\n        'type': 'geojson',\n        'data': layer\n      },\n      'layout': {\n        'visibility': layer.visible\n      },\n      'paint': {\n        'circle-radius': 5,\n        'circle-color': layer.fillColor,\n        'circle-opacity': 1\n      }\n    });\n  }\n\n  addLineLayer(layer) {\n    let map = this._map;\n    map.addLayer({\n      'id': layer.name,\n      'type': 'line',\n      'source': {\n        'type': 'geojson',\n        'data': layer\n      },\n      'layout': {\n        'visibility': layer.visible\n      },\n      'paint': {\n        'line-color': layer.borderColor,\n        'line-opacity': 1,\n        'line-width': 2\n      }\n    });\n  }\n\n  addPolygonLayer(layer) {\n    let map = this._map;\n    map.addLayer({\n      'id': layer.id,\n      'type': 'fill',\n      'source': {\n        'type': 'geojson',\n        'data': layer\n      },\n      'layout': {\n        'visibility': layer.visible\n      },\n      'paint': {\n        'fill-color': layer.fillColor,\n        'fill-opacity': layer.fillOpacity\n      }\n    });\n    map.addLayer({\n      'id': layer.id + '_outline',\n      'type': 'line',\n      'source': {\n        'type': 'geojson',\n        'data': layer\n      },\n      'layout': {\n        'visibility': layer.visible\n      },\n      'paint': {\n        'line-color': layer.borderColor,\n        'line-opacity': 1,\n        'line-width': 1\n      }\n    });\n  }\n\n  addVectorLayer(layer) {\n    this._map.addLayer({\n      'id': layer.id,\n      'type': 'fill',\n      'source': {\n        type: 'vector',\n        url: layer.source\n      },\n      'source-layer': layer.sourceLayer,\n      'layout': {\n        'visibility': layer.visible\n      },\n      'paint': {\n        'fill-color': layer.fillColor,\n        'fill-opacity': layer.fillOpacity\n      }\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          lng = _this$state2.lng,\n          lat = _this$state2.lat,\n          zoom = _this$state2.zoom;\n    return React.createElement(\"div\", {\n      className: \"map\",\n      ref: el => this.mapContainer = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  layers: state.layers\n});\n\nconst mapDispatchToProps = {\n  addLayer\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);","map":{"version":3,"sources":["/Users/ninaher/Documents/GF/src/components/map/Map.js"],"names":["React","Component","mapboxgl","connect","addLayer","formatJson","accessToken","Map","constructor","props","state","layersInMap","lng","lat","zoom","componentDidMount","map","container","mapContainer","style","center","_map","addControl","NavigationControl","on","addHeatMap","bind","getCenter","setState","toFixed","getZoom","componentDidUpdate","updateMapLayers","deleteLayers","addLayers","i","length","getSource","id","removeLayer","removeSource","layers","layer","source","addVectorLayer","addLayerByType","type","features","geometry","addPolygonLayer","addLineLayer","addPointLayer","console","log","addSource","url","maxzoom","paint","property","stops","default","minzoom","value","e","Popup","setLngLat","coordinates","setHTML","properties","dbh","addTo","visible","fillColor","name","borderColor","fillOpacity","sourceLayer","render","el","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport '../../styles/map.css'\nimport mapboxgl from 'mapbox-gl'\n//json files in map\n\n//Redux\nimport { connect } from \"react-redux\";\nimport { addLayer } from '../../actions'\n\nimport formatJson from '../utils';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\n\n\nclass Map extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      layersInMap: [],\n      lng: -80.00,\n      lat: 40.438,\n      zoom: 11\n    };\n  }\n\n\n  componentDidMount() {\n    const { lng, lat, zoom } = this.state;\n\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/light-v10',\n      center: [lng, lat],\n      zoom\n    });\n    \n    this._map = map;\n    // Add zoom and rotation controls to the map.\n    map.addControl(new mapboxgl.NavigationControl());\n\n    map.on('load', function () {\n      this.addHeatMap();\n    }.bind(this));\n\n     map.on('move', () => {\n      const { lng, lat } = map.getCenter();\n\n      this.setState({\n        lng: lng.toFixed(4),\n        lat: lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n\n  }\n  componentDidUpdate() {\n    this.updateMapLayers()\n  }\n\n  updateMapLayers(props){\n    this.deleteLayers();\n    this.addLayers();    \n  }\n\n  deleteLayers(){\n    for (let i = 0; i < this.state.layersInMap.length; i++) {\n      if(this._map.getSource(this.state.layersInMap[i].id)){\n        this._map.removeLayer(this.state.layersInMap[i].id)\n        this._map.removeSource(this.state.layersInMap[i].id)\n      }\n      if(this._map.getSource(this.state.layersInMap[i].id+'_outline')){\n        this._map.removeLayer(this.state.layersInMap[i].id + '_outline')\n        this._map.removeSource(this.state.layersInMap[i].id + '_outline')\n      }\n\n    }\n  }\n\n  addLayers(){\n    for (let i = 0; i < this.props.layers.length; i++) {\n      let layer = this.props.layers[i]\n      if(layer.source)\n        this.addVectorLayer(layer)  \n      else \n        this.addLayerByType(this.props.layers[i]);\n        \n    }\n    this.state.layersInMap = this.props.layers;\n  }\n\n  addLayerByType(layer){\n    let type = layer.features?layer.features[0].geometry.type : layer.geometry.type //FIX: Some layers received from Turf doesn't have features\n    switch (type) {\n      case 'Polygon':\n        this.addPolygonLayer(layer);\n        break;\n      case 'MultiPolygon':\n        this.addPolygonLayer(layer);\n        break;\n      case 'MultiLineString':\n        this.addLineLayer(layer);\n        break;\n      case 'Point':\n        this.addPointLayer(layer);\n        break;\n      default:\n        console.log('Unidentified layer type!!' + layer.type);\n        \n    }\n  }\n\n  addHeatMap(){\n    debugger\n    let map = this._map;\n    map.addSource('trees', {\n      type: 'vector',\n      url: 'mapbox://ninath93.5kp4zadi'\n    });\n\n    map.addLayer({\n      id: 'trees-heat',\n      \"source-layer\": \"trees-dhgc50\",\n      type: 'heatmap',\n      source: 'trees',\n      maxzoom: 15,\n      paint: {\n        // increase weight as diameter breast height increases\n        'heatmap-weight': {\n          property: 'dbh',\n          type: 'exponential',\n          stops: [\n            [1, 0],\n            [62, 1]\n          ]\n        },\n        // increase intensity as zoom level increases\n        'heatmap-intensity': {\n          stops: [\n            [11, 1],\n            [15, 3]\n          ]\n        },\n        // assign color values be applied to points depending on their density\n        'heatmap-color': [\n          'interpolate',\n          ['linear'],\n          ['heatmap-density'],\n          0, 'rgba(236,222,239,0)',\n          0.2, 'rgb(208,209,230)',\n          0.4, 'rgb(166,189,219)',\n          0.6, 'rgb(103,169,207)',\n          0.8, 'rgb(28,144,153)'\n        ],\n        // increase radius as zoom increases\n        'heatmap-radius': {\n          stops: [\n            [11, 15],\n            [15, 20]\n          ]\n        },\n        // decrease opacity to transition into the circle layer\n        'heatmap-opacity': {\n          default: 1,\n          stops: [\n            [14, 1],\n            [15, 0]\n          ]\n        },\n      }\n    }, 'waterway-label');\n    map.addLayer({\n      id: 'trees-point',\n      type: 'circle',\n      source: 'trees',\n      \"source-layer\": \"trees-dhgc50\",\n      minzoom: 14,\n      paint: {\n        // increase the radius of the circle as the zoom level and dbh value increases\n        'circle-radius': {\n          property: 'dbh',\n          type: 'exponential',\n          stops: [\n            [{ zoom: 15, value: 1 }, 5],\n            [{ zoom: 15, value: 62 }, 10],\n            [{ zoom: 22, value: 1 }, 20],\n            [{ zoom: 22, value: 62 }, 50],\n          ]\n        },\n        'circle-color': {\n          property: 'dbh',\n          type: 'exponential',\n          stops: [\n            [0, 'rgba(236,222,239,0)'],\n            [10, 'rgb(236,222,239)'],\n            [20, 'rgb(208,209,230)'],\n            [30, 'rgb(166,189,219)'],\n            [40, 'rgb(103,169,207)'],\n            [50, 'rgb(28,144,153)'],\n            [60, 'rgb(1,108,89)']\n          ]\n        },\n        'circle-stroke-color': 'white',\n        'circle-stroke-width': 1,\n        'circle-opacity': {\n          stops: [\n            [14, 0],\n            [15, 1]\n          ]\n        }\n      }\n    }, 'waterway-label');\n    map.on('click', 'trees-point', function(e) {\n      new mapboxgl.Popup()\n        .setLngLat(e.features[0].geometry.coordinates)\n        .setHTML('<div class = \"line\"><b>Garbage type:</b>'+ e.features[0].properties.dbh +'</div>' +'<div class =\"line\"><b>hei</b></div>')\n        .addTo(map);\n    });\n\n  }\n\n  addPointLayer(layer) {\n    this._map.addLayer({\n      'id': layer.id,\n      'type': 'circle',\n      'source': {\n        'type': 'geojson',\n        'data': layer\n      },\n      'layout': {'visibility': layer.visible },\n      'paint': {\n        'circle-radius': 5,\n        'circle-color': layer.fillColor,\n        'circle-opacity': 1\n      }\n    });\n  }\n\n\n  addLineLayer(layer) {\n    let map = this._map\n    map.addLayer({\n      'id': layer.name,\n      'type': 'line',\n      'source': {\n        'type': 'geojson',\n        'data': layer\n      },\n      'layout': {'visibility': layer.visible },\n      'paint': {\n        'line-color': layer.borderColor,\n        'line-opacity': 1,\n        'line-width': 2\n      }\n    });\n\n  }\n  \n\n  addPolygonLayer(layer) {\n    let map = this._map\n\n    map.addLayer({\n      'id': layer.id,\n      'type': 'fill',\n      'source': {\n        'type': 'geojson',\n        'data': layer\n      },\n      'layout': {'visibility': layer.visible },\n      'paint': {\n        'fill-color': layer.fillColor,\n        'fill-opacity': layer.fillOpacity\n      }\n    });\n\n    map.addLayer({\n      'id': layer.id + '_outline',\n      'type': 'line',\n      'source': {\n        'type': 'geojson',\n        'data': layer\n      },\n      'layout': {'visibility': layer.visible },\n      'paint': {\n        'line-color': layer.borderColor,\n        'line-opacity': 1 ,\n        'line-width': 1\n      }\n    });\n  }\n\n  addVectorLayer(layer){ \n    this._map.addLayer({\n      'id': layer.id,\n      'type': 'fill',\n      'source': {\n        type: 'vector',\n        url: layer.source\n      },\n      'source-layer': layer.sourceLayer,\n      'layout': {'visibility': layer.visible },\n      'paint': {\n        'fill-color': layer.fillColor,\n        'fill-opacity': layer.fillOpacity,\n      }\n    })\n  }\n\n\n\n  render() {\n    const { lng, lat, zoom } = this.state;\n\n    return (\n        <div className=\"map\" ref={el => this.mapContainer = el} />\n    );\n  }\n}\n\n\n\n\nconst mapStateToProps = (state) => ({\n  layers: state.layers\n});\n\nconst mapDispatchToProps = {\n  addLayer\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map);"]},"metadata":{},"sourceType":"module"}