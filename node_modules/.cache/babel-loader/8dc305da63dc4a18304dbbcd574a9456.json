{"ast":null,"code":"import _objectSpread from \"/Users/ninaher/Documents/GF/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nlet initialState = [];\n\nconst layers = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_LAYER':\n      return [...state.slice(0, state.length), action.layer, ...state.slice(state.length)];\n\n    case 'DELETE_LAYER':\n      return state.filter(function (layer) {\n        return layer.id != action.layer;\n      });\n\n    case 'UPDATE_LAYER_FILL':\n      return state.map(layer => {\n        // Find the item with the matching id\n        if (layer.id === action.layerID) {\n          return _objectSpread({}, layer, {\n            fillColor: action.fillColor\n          });\n        }\n\n        return layer;\n      });\n\n    case 'UPDATE_LAYER_BORDER':\n      return state.map(layer => {\n        // Find the item with the matching id\n        if (layer.id === action.layerID) {\n          return _objectSpread({}, layer, {\n            borderColor: action.borderColor\n          });\n        }\n\n        return layer;\n      });\n\n    case 'UPDATE_LAYER_VISIBILITY':\n      return state.map(layer => {\n        if (layer.id === action.layerID) {\n          return _objectSpread({}, layer, {\n            visible: action.visibility\n          });\n        }\n\n        return layer;\n      });\n\n    case 'UPDATE_LAYER_NAME':\n      return state.map(layer => {\n        if (layer.id === action.layerID) {\n          return _objectSpread({}, layer, {\n            name: action.name\n          });\n        }\n\n        return layer;\n      });\n\n    case 'TOGGLE_TODO':\n      return state.map(todo => todo.id === action.id ? _objectSpread({}, todo, {\n        completed: !todo.completed\n      }) : todo);\n\n    default:\n      return state;\n  }\n};\n\nexport default layers;","map":{"version":3,"sources":["/Users/ninaher/Documents/GF/src/reducers/layers.js"],"names":["initialState","layers","state","action","type","slice","length","layer","filter","id","map","layerID","fillColor","borderColor","visible","visibility","name","todo","completed"],"mappings":";AAAA,IAAIA,YAAY,GAAG,EAAnB;;AAEA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO,CACL,GAAGF,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeH,KAAK,CAACI,MAArB,CADE,EAELH,MAAM,CAACI,KAFF,EAGL,GAAGL,KAAK,CAACG,KAAN,CAAYH,KAAK,CAACI,MAAlB,CAHE,CAAP;;AAMF,SAAK,cAAL;AACE,aAAQJ,KAAK,CAACM,MAAN,CAAa,UAASD,KAAT,EAAe;AAAC,eAAOA,KAAK,CAACE,EAAN,IAAYN,MAAM,CAACI,KAA1B;AAAiC,OAA9D,CAAR;;AAEF,SAAK,mBAAL;AACE,aAAOL,KAAK,CAACQ,GAAN,CAAWH,KAAD,IAAW;AAC1B;AACA,YAAGA,KAAK,CAACE,EAAN,KAAaN,MAAM,CAACQ,OAAvB,EAAgC;AAC9B,mCACKJ,KADL;AAEEK,YAAAA,SAAS,EAAET,MAAM,CAACS;AAFpB;AAID;;AACD,eAAOL,KAAP;AACD,OATM,CAAP;;AAWA,SAAK,qBAAL;AACA,aAAOL,KAAK,CAACQ,GAAN,CAAWH,KAAD,IAAW;AAC1B;AACA,YAAGA,KAAK,CAACE,EAAN,KAAaN,MAAM,CAACQ,OAAvB,EAAgC;AAC9B,mCACKJ,KADL;AAEEM,YAAAA,WAAW,EAAEV,MAAM,CAACU;AAFtB;AAID;;AACD,eAAON,KAAP;AACD,OATM,CAAP;;AAWF,SAAK,yBAAL;AACE,aAAOL,KAAK,CAACQ,GAAN,CAAWH,KAAD,IAAW;AAC1B,YAAGA,KAAK,CAACE,EAAN,KAAaN,MAAM,CAACQ,OAAvB,EAAgC;AAC9B,mCACKJ,KADL;AAEEO,YAAAA,OAAO,EAAEX,MAAM,CAACY;AAFlB;AAID;;AACD,eAAOR,KAAP;AACD,OARM,CAAP;;AAUF,SAAK,mBAAL;AACE,aAAOL,KAAK,CAACQ,GAAN,CAAWH,KAAD,IAAW;AAC1B,YAAGA,KAAK,CAACE,EAAN,KAAaN,MAAM,CAACQ,OAAvB,EAAgC;AAC9B,mCACKJ,KADL;AAEES,YAAAA,IAAI,EAAEb,MAAM,CAACa;AAFf;AAID;;AACD,eAAOT,KAAP;AACD,OARM,CAAP;;AAUF,SAAK,aAAL;AACE,aAAOL,KAAK,CAACQ,GAAN,CAAUO,IAAI,IACnBA,IAAI,CAACR,EAAL,KAAYN,MAAM,CAACM,EAAnB,qBAA6BQ,IAA7B;AAAmCC,QAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAApD,WAAkED,IAD7D,CAAP;;AAGF;AACE,aAAOf,KAAP;AA9DJ;AAgED,CAjEH;;AAmEE,eAAeD,MAAf","sourcesContent":["let initialState = []\n\nconst layers = (state = initialState, action) => {\n    switch (action.type) {\n      case 'ADD_LAYER':\n        return [\n          ...state.slice(0, state.length),\n          action.layer,\n          ...state.slice(state.length)\n        ]\n\n      case 'DELETE_LAYER':\n        return  state.filter(function(layer){return layer.id != action.layer })\n      \n      case 'UPDATE_LAYER_FILL':\n        return state.map((layer) => {\n          // Find the item with the matching id\n          if(layer.id === action.layerID) {\n            return {\n              ...layer,  \n              fillColor: action.fillColor \n            }\n          }\n          return layer;\n        });\n      \n        case 'UPDATE_LAYER_BORDER':\n        return state.map((layer) => {\n          // Find the item with the matching id\n          if(layer.id === action.layerID) {\n            return {\n              ...layer,  \n              borderColor: action.borderColor \n            }\n          }\n          return layer;\n        });\n\n      case 'UPDATE_LAYER_VISIBILITY':\n        return state.map((layer) => {\n          if(layer.id === action.layerID) {\n            return {\n              ...layer,  \n              visible: action.visibility \n            }\n          }\n          return layer;\n        });\n      \n      case 'UPDATE_LAYER_NAME':\n        return state.map((layer) => {\n          if(layer.id === action.layerID) {\n            return {\n              ...layer,  \n              name: action.name \n            }\n          }\n          return layer;\n        });\n\n      case 'TOGGLE_TODO':\n        return state.map(todo =>\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n        )\n      default:\n        return state\n    }\n  }\n  \n  export default layers\n\n"]},"metadata":{},"sourceType":"module"}